h1. Semi-private Reference

Semi-private-reference is a specification and java reference implementation for a simple wrapper that can be deployed around a SHA-1 content-addressable storage system. It provides decent privacy protection that follows the "trust no one" pattern with some very interesting privacy and technical trade-offs.

On the one hand, it might allow for an entire storage server of personal and corporate secrets to be both "deduplicated", "open to the public", and "accessible without encryption" without compromising security at all. And on the other hand, storage of "readily obtainable but illegal files" (i.e. warez) would be even easier to scan for by checking the filenames only. In general, it provides strong protection for *files you create or keep to your self (or group)*, and an effective guard against those that have read-access to the underlying storage mechanism (such as other users of the system or your cloud-storage-provider).

When a file (or stream of bytes) is fed into a content-addressable storage system, SPR first hashes the original data to derive an unknowable symmetric encryption key, then it passes the encrypted data down into the conventional CAS subsystem. The file handle that is returned (starting with "spr1-", MUST be kept in order to return the file), but will also be identical (at least, in principal) for the same file. No password is required for encryption or decryption, you can consider the password as coming from the file itself, or being "stored" in the file reference.

At a high level, it closely resembles the goals of *libchop*, but uses different hash and crypto functions, and does not reach into any deeper layers of this area that would need to be solved (such as segmenting large blocks or creating indexes).

h2. Privacy Expectations and Considerations

SPR is considered and expected to be only *semi* private for the following reasons:
* It provides a more-than-adequate privacy wall to protect from casual snooping (e.g. between users of the same system, your cloud provider, and maybe even the NSA?)
* It provides a good measure of protection from accidental (or intentional) publication of the underlying data repository (e.g. s3 permissions)
* It uses the no-longer-recommended SHA-1 hash function in favor of:
** a shorter final identifier,
** an easier-to-remember correlation (spr1~=sha1), and
** compatibility with pre-existing SHA-1 CAS systems
* This mechanism is best applied to pre-existing files or small blocks of data (such as those coming out of a libchop's stream-chopping-indexer) that fit wholly in-memory, as inserting a large data stream as one big reference would require buffering the plaintext to disk (in order to compute it's sum) which is generally a BAD idea.
* It feeds a *less-than-ideal* key into the Salsa20 encryption algorithm (160 bits, when 256 is recommended) from the output size of SHA-1,
* It does not use a proper 'nonce' for the Salso20 algorithm (in order to retain the CAS & deduplication requirements), and
* It provides no mechanism to obscure (nor is it designed to hide) the length of a unencrypted file/block
* It provides effectively *zero* protection from an attacker that can read the encrypted repo that desires to *test* for the existence of a known file (in favor of de-duplication).

For more information, please read "this wikipedia article":https://en.wikipedia.org/wiki/Convergent_encryption on "convergent encryption".

h2. Specification / Documentation

* [[docs/common]] - Ideas and concepts that apply to more than one spr idea.
* [[docs/spr1]] - A basic single-file encryption mechanism that does not effect the file size and maintains deduplication ability.
* [[docs/spr2]] - A "tree-like" structure that makes use of the spr1 mechanisms, that is useful for capturing a changing directory of files. Basically allows one to map a string to a file, and express files & directories with near-arbitrary block sizes.


h2. Other Implementations

There are currently no other known implementations of SPR. :(

We are very interested in hearing about any implementation, but particularly encourage those that might:
* Port the reference implementation to another programming language, and
* Cleanly re-implement the specification to discover bugs or further validate both implementation's correctness.

