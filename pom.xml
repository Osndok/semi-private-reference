<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.osndok.spr</groupId>
	<artifactId>semi-private-reference</artifactId>
	<version>${release.version}</version>

	<packaging>jar</packaging>

	<name>spr</name>
	<url>https://github.com/Osndok/semi-private-reference</url>

	<description>
		Semi-private-reference is a specification and reference implementation for a simple wrapper that
		can be deployed around a SHA-1 content-addressable storage system. It provides decent privacy protection
		that follows the "trust no one" pattern with some very interesting privacy and technical trade-offs.

		On the one hand, it might allow for an entire storage server of personal and corporate secrets to be both
		"deduplicated", "open to the public", and "accessible without encryption" without compromising security
		at all. And on the other hand, storage of "readily obtainable but illegal files" (i.e. warez) would be
		even easier to scan for by checking the filenames only. In general, it provides strong protection for
		files you create or keep to your self (or group), and an effective guard against those that have read-access
		to the underlying storage mechanism (such as other users of the system or your cloud-storage-provider).

		When a file (or stream of bytes) is fed into a content-addressable storage system, SPR first hashes the
		original data to derive an unknowable symmetric encryption key, then it passes the encrypted data down
		into the conventional CAS subsystem. The file handle that is returned (starting with "spr1-", MUST be
		kept in order to return the file), but will also be identical (at least, in principal) for the same
		file. No password is required for encryption or decryption, you can consider the password as coming from
		the file itself, or being "stored" in the file reference.

		At a high level, it closely resembles the goals of "libchop", but uses different hash and crypto functions,
		and does not reach into any deeper layers of this area that would need to be solved (such as segmenting
		large blocks or creating indexes).
	</description>

	<dependencies>

		<!-- For annotations concerning command line utility, easy to kern out if undesired - ->
		<dependency>
			<groupId>com.github.osndok.javax.module</groupId>
			<artifactId>javax-module</artifactId>
			<version>1.0.7</version>
		</dependency>
		-->

		<!-- For conversion to/from Hexadecimal and Base64url encodings -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.10</version>
		</dependency>

		<!--
		For a fast, and assuredly-correct (but not pure-java/portable) implementation of Salsa20 encryption.
		Unfortunately, it does not seem to work for 'subsequent use' for unknown reasons (SIGSEGV).
		Using the "provided" scope means we can still let our engineers fiddle without requiring code changes.
		-->
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>4.2.1</version>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>

		<!--
		A pure java implementation is much slower, but avoids the native interface boundary, and is thus
		unlikely to cause a segmentation-fault. It's output seems to agree with libsodium, and (therefor)
		the Salsa20 reference implementation (which libsodium includes wholesale in it's source).
		-->
		<dependency>
			<groupId>com.github.emstlk</groupId>
			<artifactId>nacl4s_2.11</artifactId>
			<version>1.0.0</version>
		</dependency>

		<!-- To enable basic unit testing -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.9.9</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>com.sap.prd.mobile.ios.maven.plugins</groupId>
				<artifactId>resolve-pom-maven-plugin</artifactId>
				<version>1.0</version>
				<executions>
					<execution>
						<id>resolve-pom-props</id>
						<goals>
							<goal>resolve-pom-props</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

	<properties>
		<release.version>snapshot</release.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

</project>
